#BlueJ class context
comment0.target=GalleryTest
comment0.text=\r\n\ The\ test\ class\ GalleryTest.\r\n\ \r\n\ @author\ Sebastian\ Zamora\r\n\ @author\ Johann\ Amaya\r\n\ @version\ 1.5\r\n
comment1.params=
comment1.target=void\ setUp()
comment10.params=
comment10.target=void\ testArriveGuardInNonExistingRoom()
comment10.text=\r\n\ crea\ una\ galer\u00EDa\ y\ trata\ de\ agregar\ un\ guardia\ en\ una\ habitaci\u00F3n\ que\ no\r\n\ existe,\r\n\ lo\ que\ deber\u00EDa\ arrojar\ una\ excepci\u00F3n\ GalleryExecption.\ El\ test\ verifica\ si\ se\r\n\ produce\r\n\ la\ excepci\u00F3n\ y\ si\ su\ mensaje\ es\ el\ esperado.\r\n
comment11.params=
comment11.target=void\ testMoveGuard()
comment11.text=\r\n\ Test\ para\ verificar\ si\ un\ guardia\ se\ mueve\ a\ una\ posici\u00F3n\ v\u00E1lida\ dentro\ de\r\n\ una\ habitaci\u00F3n.\r\n\ \r\n\ @throws\ GalleryException\ en\ caso\ de\ que\ se\ produzca\ un\ error\ en\ la\ galer\u00EDa\r\n
comment12.params=
comment12.target=void\ testMoveGuardToNonExistingRoom()
comment12.text=\r\n\ Test\ para\ verificar\ si\ un\ guardia\ se\ mueve\ a\ una\ posici\u00F3n\ dentro\ de\ una\r\n\ habitaci\u00F3n\ que\ no\ existe.\r\n
comment13.params=
comment13.target=void\ testMoveGuardOutsideRoom()
comment13.text=\r\n\ Test\ para\ verificar\ si\ un\ guardia\ se\ mueve\ a\ una\ posici\u00F3n\ fuera\ de\ una\r\n\ habitaci\u00F3n.\r\n
comment14.params=
comment14.target=void\ testMoveGuardWithNoGuard()
comment14.text=\r\n\ Test\ para\ verificar\ si\ se\ intenta\ mover\ un\ guardia\ en\ una\ habitaci\u00F3n\ donde\ no\r\n\ hay\ ning\u00FAn\ guardia.\r\n
comment15.params=
comment15.target=void\ shouldHaveRoomsWithAlarms()
comment15.text=\r\n\ Test\ para\ verificar\ si\ las\ salas\ con\ alarmas\ est\u00E1n\ siendo\ notificadas\r\n\ correctamente.\r\n
comment16.params=
comment16.target=void\ testStealSculpture()
comment17.params=
comment17.target=void\ testSculptureLocation()
comment17.text=\r\n\ \ \ \ @Test\r\n\ \ \ \ public\ void\ testSteal()\ {\r\n\ \ \ \ \ \ \ \ assertFalse(gallery.rooms.get("red").isAlarmOn());\r\n\ \ \ \ \ \ \ \ gallery.displaySculpture("red",\ 60,\ 60);\r\n\ \ \ \ \ \ \ \ assertTrue(gallery.rooms.get("red").isAlarmOn());\r\n\ \ \ \ \ \ \ \ gallery.arriveGuard("red");\r\n\ \ \ \ \ \ \ \ gallery.moveGuard("red",\ 80,\ 80);\r\n\ \ \ \ \ \ \ \ assertTrue(gallery.rooms.get("red").isAlarmOn());\r\n\ \ \ \ \ \ \ \ gallery.moveGuard("red",\ 70,\ 70);\r\n\ \ \ \ \ \ \ \ assertFalse(gallery.rooms.get("red").isAlarmOn());\r\n\ \ \ \ }\r\n\r\n\ \ \ \ @Test\r\n\ \ \ \ public\ void\ testRooms()\ {\r\n\ \ \ \ \ \ \ \ assertEquals(1,\ gallery.rooms.size());\r\n\ \ \ \ \ \ \ \ int[][]\ polygon2\ \=\ {\ {\ 150,\ 150\ },\ {\ 200,\ 150\ },\ {\ 200,\ 200\ },\ {\ 150,\ 200\ }\ };\r\n\ \ \ \ \ \ \ \ gallery.buildRoom("green",\ polygon2);\r\n\ \ \ \ \ \ \ \ assertEquals(2,\ gallery.rooms.size());\r\n\ \ \ \ \ \ \ \ assertEquals("red",\ gallery.rooms.keySet().toArray()[0]);\r\n\ \ \ \ \ \ \ \ assertEquals("green",\ gallery.rooms.keySet().toArray()[1]);\r\n\ \ \ \ }\r\n\r\n\ \ \ \ @Test\r\n\ \ \ \ public\ void\ testRoomsOnAlert()\ {\r\n\ \ \ \ \ \ \ \ assertFalse(gallery.rooms.get("red").isAlarmOn());\r\n\ \ \ \ \ \ \ \ gallery.displaySculpture("red",\ 60,\ 60);\r\n\ \ \ \ \ \ \ \ assertTrue(gallery.roomsOnAlert().contains(gallery.rooms.get("red")));\r\n\ \ \ \ \ \ \ \ gallery.arriveGuard("red");\r\n\ \ \ \ \ \ \ \ gallery.moveGuard("red",\ 80,\ 80);\r\n\ \ \ \ \ \ \ \ assertTrue(gallery.roomsOnAlert().contains(gallery.rooms.get("red")));\r\n\ \ \ \ \ \ \ \ gallery.moveGuard("red",\ 70,\ 70);\r\n\ \ \ \ \ \ \ \ assertFalse(gallery.roomsOnAlert().contains(gallery.rooms.get("red")));\r\n\ \ \ \ }\r\n\r\n\ \ \ \ @Test\r\n\ \ \ \ public\ void\ testGuardLocation()\ {\r\n\ \ \ \ \ \ \ \ assertNull(gallery.guardLocation());\r\n\ \ \ \ \ \ \ \ gallery.arriveGuard("red");\r\n\ \ \ \ \ \ \ \ gallery.moveGuard("red",\ 80,\ 80);\r\n\ \ \ \ \ \ \ \ assertArrayEquals(new\ int[]\ {\ 80,\ 80\ },\ gallery.guardLocation());\r\n}
comment18.params=
comment18.target=void\ testDistanceTraveled()
comment19.params=
comment19.target=void\ testSculpturePresent()
comment2.params=
comment2.target=void\ testBuildRoom()
comment2.text=\r\n\ crea\ una\ galer\u00EDa\ y\ agrega\ una\ habitaci\u00F3n\ con\ un\ conjunto\ de\ v\u00E9rtices\ dados.\r\n\ Luego,\ verifica\ si\ la\ habitaci\u00F3n\ ha\ sido\ agregada\ correctamente\ y\ si\ tiene\ el\r\n\ nombre\ correcto.\r\n
comment20.params=
comment20.target=void\ testGetVertices()
comment20.text=\r\n\ \ \ \ @Test\r\n\ \ \ \ public\ void\ testRoomsFalseAlarm()\ {\r\n\ \ \ \ \ \ \ \ gallery.buildRoom("blue",\ new\ int[][]\ {\ {\ 0,\ 0\ },\ {\ 100,\ 0\ },\ {\ 100,\ 100\ },\ {\ 0,\ 100\ }\ });\r\n\ \ \ \ \ \ \ \ gallery.buildRoom("green",\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ new\ int[][]\ {\ {\ 200,\ 0\ },\ {\ 300,\ 0\ },\ {\ 250,\ 50\ },\ {\ 300,\ 100\ },\ {\ 200,\ 100\ },\ {\ 250,\ 50\ }\ });\r\n\ \ \ \ \ \ \ \ gallery.alarm("blue",\ true);\r\n\ \ \ \ \ \ \ \ gallery.alarm("green",\ true);\r\n\ \ \ \ \ \ \ \ assertFalse(gallery.roomsWithFalseAlarm(),\ "There\ should\ be\ no\ false\ alarm");\r\n\ \ \ \ \ \ \ \ gallery.arriveGuard("blue");\r\n\ \ \ \ \ \ \ \ gallery.moveGuard("blue",\ 50,\ 50);\r\n\ \ \ \ \ \ \ \ assertTrue(gallery.roomsWithFalseAlarm(),\ "There\ should\ be\ a\ false\ alarm");\r\n}
comment21.params=
comment21.target=void\ testGetException()
comment21.text=\r\n\ \ \ \ @Test\r\n\ \ \ \ public\ void\ testMakeVisible()\ {\r\n\ \ \ \ \ \ \ \ gallery.buildRoom("yellow",\ new\ int[][]\ {\ {\ 0,\ 0\ },\ {\ 100,\ 0\ },\ {\ 100,\ 100\ },\ {\ 0,\ 100\ }\ });\r\n\ \ \ \ \ \ \ \ gallery.makeVisible();\r\n\ \ \ \ \ \ \ \ assertTrue(Canvas.getCanvas("Galeria").isVisible(),\ "The\ canvas\ should\ be\ visible");\r\n\ \ \ \ }\r\n\r\n\ \ \ \ @Test\r\n\ \ \ \ public\ void\ testMakeInvisible()\ {\r\n\ \ \ \ \ \ \ \ gallery.buildRoom("pink",\ new\ int[][]\ {\ {\ 0,\ 0\ },\ {\ 100,\ 0\ },\ {\ 100,\ 100\ },\ {\ 0,\ 100\ }\ });\r\n\ \ \ \ \ \ \ \ gallery.makeVisible();\r\n\ \ \ \ \ \ \ \ gallery.makeInvisible();\r\n\ \ \ \ \ \ \ \ assertFalse(Canvas.getCanvas("Galeria").isVisible(),\ "The\ canvas\ should\ be\ invisible");\r\n\ \ \ \ }\r\n\r\n\ \ \ \ @Test\r\n\ \ \ \ public\ void\ testIntersect()\ {\r\n\ \ \ \ \ \ \ \ assertTrue(gallery.intersect(new\ int[][]\ {\ {\ 0,\ 0\ },\ {\ 100,\ 0\ },\ {\ 100,\ 100\ },\ {\ 0,\ 100\ }\ }),\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "The\ polygon\ should\ not\ intersect");\r\n\ \ \ \ \ \ \ \ assertFalse(gallery.intersect(new\ int[][]\ {\ {\ 0,\ 0\ },\ {\ 50,\ 50\ },\ {\ 100,\ 0\ },\ {\ 50,\ 100\ },\ {\ 0,\ 50\ }\ }),\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "The\ polygon\ should\ intersect");\r\n}
comment22.params=
comment22.target=void\ test_GetVertices()
comment3.params=
comment3.target=void\ testConstructor()
comment3.text=\r\n\ Verifica\ que\ el\ constructor\ de\ Gallery\ cree\ correctamente\ una\ galer\u00EDa\ y\ que\r\n\ las\ banderas\ confirm\ y\ problem\ se\ establezcan\ correctamente.\r\n\ Adem\u00E1s,\ se\ comprueba\ que\ el\ campo\ exepcion\ sea\ nulo,\ lo\ que\ indica\ que\ no\ se\r\n\ produjo\ ninguna\ excepci\u00F3n\ durante\ la\ construcci\u00F3n.\r\n
comment4.params=
comment4.target=void\ testBuildRoomWithExistingRoom()
comment4.text=\r\n\ crea\ una\ galer\u00EDa\ y\ agrega\ una\ habitaci\u00F3n\ con\ un\ conjunto\ de\ v\u00E9rtices\ dados.\r\n\ Luego,\ intenta\ agregar\ una\ segunda\ habitaci\u00F3n\ con\ el\ mismo\ nombre,\ lo\ que\r\n\ deber\u00EDa\ arrojar\ una\ excepci\u00F3n\r\n\ GalleryExecption\ porque\ el\ nombre\ ya\ est\u00E1\ siendo\ utilizado.\ El\ test\ verifica\r\n\ si\ se\ produce\ la\ excepci\u00F3n\ y\ si\ su\ mensaje\ es\ el\ esperado.\r\n
comment5.params=
comment5.target=void\ testBuildRoomAfterDisplayingSculpture()
comment5.text=\r\n\ crea\ una\ galer\u00EDa\ y\ muestra\ una\ escultura\ en\ una\ habitaci\u00F3n\ que\ a\u00FAn\ no\ existe.\r\n\ Luego,\ intenta\ agregar\ una\ nueva\ habitaci\u00F3n,\ lo\ que\ deber\u00EDa\ arrojar\ una\r\n\ excepci\u00F3n\ GalleryExecption\ porque\r\n\ no\ se\ puede\ agregar\ una\ habitaci\u00F3n\ despu\u00E9s\ de\ mostrar\ una\ escultura.\ El\ test\r\n\ verifica\ si\ se\ produce\ la\ excepci\u00F3n\ y\ si\ su\ mensaje\ es\ el\ esperado.\r\n
comment6.params=
comment6.target=void\ shouldNotCreateSculptureInARoomThatHave()
comment6.text=\r\n\ Verifica\ que\ no\ se\ pueda\ crear\ una\ escultura\ en\ una\ habitaci\u00F3n\ que\ ya\ tenga\r\n\ una\ escultura.\r\n\ Para\ ello,\ primero\ se\ construye\ una\ habitaci\u00F3n\ con\ un\ conjunto\ de\ v\u00E9rtices\r\n\ dados\ y\ se\ agrega\ una\ escultura.\r\n\ Luego,\ se\ intenta\ agregar\ otra\ escultura\ en\ la\ misma\ habitaci\u00F3n\ y\ se\ verifica\r\n\ que\ se\ produzca\ una\ excepci\u00F3n\r\n\ y\ que\ la\ bandera\ confirm\ se\ establezca\ en\ falso.\r\n
comment7.params=
comment7.target=void\ testDisplaySculpture()
comment7.text=\r\n\ crea\ una\ galer\u00EDa,\ agrega\ una\ habitaci\u00F3n\ con\ un\ conjunto\ de\ v\u00E9rtices\ dados\ y\r\n\ muestra\ una\ escultura\ en\ esa\ habitaci\u00F3n.\r\n\ Luego,\ verifica\ si\ la\ galer\u00EDa\ est\u00E1\ en\ un\ estado\ "correcto",\ es\ decir,\ si\ no\r\n\ hay\ habitaciones\ vac\u00EDas\ ni\ esculturas\ superpuestas.\r\n
comment8.params=
comment8.target=void\ testDisplaySculptureInNonExistingRoom()
comment8.text=\r\n\ crea\ una\ galer\u00EDa\ y\ trata\ de\ mostrar\ una\ escultura\ en\ una\ habitaci\u00F3n\ que\ no\r\n\ existe,\r\n\ lo\ que\ deber\u00EDa\ arrojar\ una\ excepci\u00F3n\ GalleryExecption.\ El\ test\ verifica\ si\ se\r\n\ produce\ la\ excepci\u00F3n\ y\ si\ su\ mensaje\ es\ el\ esperado.\r\n
comment9.params=
comment9.target=void\ testArriveGuard()
comment9.text=\r\n\ crea\ una\ galer\u00EDa,\ agrega\ una\ habitaci\u00F3n\ con\ un\ conjunto\ de\ v\u00E9rtices\ dados\r\n\ y\ luego\ agrega\ un\ guardia\ a\ esa\ habitaci\u00F3n.\ Luego,\ verifica\ si\ la\ galer\u00EDa\r\n\ est\u00E1\ en\ un\ estado\ "correcto",\ es\ decir,\ si\ no\ hay\ habitaciones\ vac\u00EDas\ ni\r\n\ guardias\ en\ habitaciones\ vac\u00EDas.\r\n
numComments=23
