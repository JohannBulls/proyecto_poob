#BlueJ class context
comment0.target=GalleryContest
comment0.text=\r\n\ Let\ me\ simulate\ and\ solve\ the\ problem\r\n\ \r\n\ @author\ Sebastian\ Zamora\r\n\ @author\ Johann\ Amaya\r\n\ @version\ 2.0\r\n
comment1.params=polygon\ guard\ sculpture
comment1.target=float\ solve(int[][],\ int[],\ int[])
comment1.text=\r\n\ \r\n\ Solves\ the\ art\ museum\ problem\ by\ computing\ the\ shortest\ path\ a\ guard\ must\r\n\ take\r\n\ to\ see\ the\ sculpture\ without\ being\ seen\ by\ any\ intruder.\r\n\ \r\n\ @param\ polygon\ \ \ a\ 2D\ array\ of\ integers\ that\ represents\ the\ vertices\ of\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ polygon.\r\n\ @param\ guard\ \ \ \ \ an\ array\ of\ integers\ that\ represents\ the\ starting\ position\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ of\ the\ guard.\r\n\ @param\ sculpture\ an\ array\ of\ integers\ that\ represents\ the\ position\ of\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ sculpture.\r\n\ @return\ a\ float\ value\ that\ represents\ the\ shortest\ distance\ traveled\ by\ the\r\n\ \ \ \ \ \ \ \ \ guard.\r\n
comment2.params=polygon\ guard\ sculpture
comment2.target=float\ simulate(int[][],\ int[],\ int[])
comment2.text=\r\n\ \r\n\ Simulates\ the\ movement\ of\ the\ guard\ through\ the\ art\ museum\ by\ moving\ the\r\n\ guard\ to\r\n\ different\ positions\ and\ computing\ the\ shortest\ distance\ traveled\ each\ time.\r\n\ \r\n\ @param\ polygon\ \ \ a\ 2D\ array\ of\ integers\ that\ represents\ the\ vertices\ of\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ polygon.\r\n\ @param\ guard\ \ \ \ \ an\ array\ of\ integers\ that\ represents\ the\ starting\ position\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ of\ the\ guard.\r\n\ @param\ sculpture\ an\ array\ of\ integers\ that\ represents\ the\ position\ of\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ sculpture.\r\n\ @return\ a\ float\ value\ that\ represents\ the\ shortest\ distance\ traveled\ by\ the\r\n\ \ \ \ \ \ \ \ \ guard\ during\ the\ simulation.\r\n
comment3.params=guardLocation\ sculptureLocation\ vertices
comment3.target=void\ solution(int[],\ int[],\ int[][])
comment3.text=\r\n\ \r\n\ Computes\ the\ solution\ to\ the\ art\ museum\ problem\ by\ determining\ the\ path\ the\r\n\ guard\ must\ take\r\n\ to\ see\ the\ sculpture\ without\ being\ seen\ by\ any\ intruder.\r\n\ \r\n\ @param\ guardLocation\ \ \ \ \ an\ array\ of\ integers\ that\ represents\ the\ starting\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ position\ of\ the\ guard.\r\n\ @param\ sculptureLocation\ an\ array\ of\ integers\ that\ represents\ the\ position\ of\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ sculpture.\r\n\ @param\ vertices\ \ \ \ \ \ \ \ \ \ a\ 2D\ array\ of\ integers\ that\ represents\ the\ vertices\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ of\ the\ polygon.\r\n
comment4.params=startPoint\ endPoint\ vertices
comment4.target=int[]\ verticeNearest(int[],\ int[],\ int[][])
comment4.text=\r\n\ \r\n\ Finds\ the\ nearest\ vertice\ of\ a\ polygon\ from\ a\ given\ start\ point\ to\ a\ given\r\n\ end\ point.\r\n\ \r\n\ @param\ startPoint\ an\ array\ of\ integers\ that\ represents\ the\ starting\ point.\r\n\ @param\ endPoint\ \ \ an\ array\ of\ integers\ that\ represents\ the\ ending\ point.\r\n\ @param\ vertices\ \ \ a\ 2D\ array\ of\ integers\ that\ represents\ the\ vertices\ of\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ polygon.\r\n\ @return\ an\ array\ of\ integers\ that\ represents\ the\ nearest\ vertice\ to\ the\ start\r\n\ \ \ \ \ \ \ \ \ point.\r\n
comment5.params=start\ finish
comment5.target=int[]\ colocar(int[],\ int[])
comment5.text=\r\n\ let\ me\ put\ the\ point\ that\ move\ the\ guard.\r\n\ \r\n\ @param\ start\ \ the\ chord\ coordinates\ of\ the\ start\ point.\r\n\ @param\ finish\ the\ chord\ coordinates\ of\ the\ end\ point.\r\n\ @return\ the\ chord\ coodinates\ of\ the\ point.\r\n
comment6.params=polygon
comment6.target=void\ buildlineas(int[][])
comment6.text=\r\n\ Let\ me\ make\ the\ walls\ of\ the\ rooms\r\n\ \r\n\ @param\ polygon\ the\ matrix\ with\ all\ vertices\ of\ the\ room\r\n\ @return\ the\ matirx\ of\ the\ walls\r\n
comment7.params=posGuardia\ posEscultura
comment7.target=boolean\ guardSeeTheSculpture(int[],\ int[])
comment7.text=\r\n\ Let\ me\ know\ if\ the\ guard\ see\ the\ sculpture\r\n\ \r\n\ @return\ if\ the\ guard\ see\ the\ sculpture\r\n
comment8.params=esculIni\ esculFin\ guardIni
comment8.target=float[]\ interPosition(int[],\ int[],\ int[])
comment8.text=\r\n\ \r\n\ Calculates\ the\ intersection\ point\ of\ two\ lines\ given\ their\ start\ and\ end\r\n\ points.\r\n\ \r\n\ @param\ esculIni\ an\ array\ of\ integers\ that\ represents\ the\ start\ point\ of\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ sculpture\ line.\r\n\ @param\ esculFin\ an\ array\ of\ integers\ that\ represents\ the\ end\ point\ of\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ sculpture\ line.\r\n\ @param\ guardIni\ an\ array\ of\ integers\ that\ represents\ the\ start\ point\ of\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ guard's\ line\ of\ sight.\r\n\ @return\ an\ array\ of\ floats\ that\ represents\ the\ intersection\ point\ of\ the\ two\r\n\ \ \ \ \ \ \ \ \ lines.\r\n
comment9.params=matriz
comment9.target=float[][]\ gaussJordan(float[][])
comment9.text=\r\n\ \r\n\ Applies\ Gauss-Jordan\ elimination\ to\ a\ matrix\ to\ solve\ a\ system\ of\ linear\r\n\ equations.\r\n\ \r\n\ @param\ matriz\ The\ matrix\ representing\ the\ system\ of\ equations.\r\n\ @return\ The\ matrix\ in\ row\ echelon\ form,\ with\ the\ solutions\ to\ the\ system\ in\r\n\ \ \ \ \ \ \ \ \ the\ last\ column.\r\n
numComments=10
